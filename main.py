import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart  # Text —É–±—Ä–∞–Ω
import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

knowledge_base = {
    "–∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è": {
        "–∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å": {
            "keywords": ["–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ", "–¥–æ–≥–æ–≤–æ—Ä", "–∞—Ä–µ–Ω–¥–∞"],
            "answer": "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è: 1) —á–∏—Ç–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä, 2) –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–æ–∫."
        },
        "–∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ª–æ–≥": {
            "keywords": ["–∑–∞–ª–æ–≥", "–≤–µ—Ä–Ω—É—Ç—å", "–¥–µ–ø–æ–∑–∏—Ç"],
            "answer": "–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –¢—Ä–µ–±—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∫—É."
        }
    },
    "–º–µ–¥–∏—Ü–∏–Ω–∞": {
        "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏—Å –æ–º—Å": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Å–∞ –û–ú–° –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ú–§–¶ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –°–ù–ò–õ–°."
        },
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É": {
            "keywords": ["–≤—Ä–∞—á", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"],
            "answer": "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã."
        }
    },
}

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=theme.title(), callback_data=f"theme:{theme}")]
            for theme in knowledge_base
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data or ""
    
    if data.startswith("theme:"):
        theme = data.split(":", 1)[1]
        subtopics = knowledge_base.get(theme, {})
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=sub.title(), callback_data=f"sub:{theme}:{sub}")]
                for sub in subtopics
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        )
        await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {theme.title()}\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)
    
    elif data.startswith("sub:"):
        _, theme, sub = data.split(":", 2)
        answer = knowledge_base.get(theme, {}).get(sub, {}).get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]]
        )
        await callback.message.edit_text(f"üßæ {sub.title()}:\n\n{answer}", reply_markup=kb)
    
    elif data == "back_to_menu":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=theme.title(), callback_data=f"theme:{theme}")]
                for theme in knowledge_base
            ]
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)
    
    else:
        await callback.answer()  # –ß—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ "—á–∞—Å–∏–∫–∏"

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
