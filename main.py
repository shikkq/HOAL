import asyncio
import json
import hashlib
import os

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

CACHE_FILE = "callback_cache.json"
callback_data_map = {}  # id -> —Ç–µ–º–∞ –∏–ª–∏ [—Ç–µ–º–∞, –ø–æ–¥—Ç–µ–º–∞]

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
knowledge_base = {
    "–ñ–∏–ª—å—ë": {
        "–ö–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É": {
            "keywords": ["–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ", "–¥–æ–≥–æ–≤–æ—Ä", "–∞—Ä–µ–Ω–¥–∞"],
            "answer":"""
1. –ò—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ –¶–ò–ê–ù, –ê–≤–∏—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–∞—Ö.

2. –ü–∏—à–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –∏–ª–∏ –∞–≥–µ–Ω—Ç—É. –°—Ä–∞–∑—É —É–∑–Ω–∞—ë–º:
‚Äì –≠—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∏–ª–∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫?
‚Äì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞, –∑–∞–ª–æ–≥ –∏ —É—Å–ª—É–≥–∏ —Ä–∏—ç–ª—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)?
3. –ü—Ä–∏–∫–∏–¥—ã–≤–∞–µ–º: –æ–±—ã—á–Ω–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É –∑–∞ 1 –º–µ—Å—è—Ü + –∑–∞–ª–æ–≥ + —É—Å–ª—É–≥–∏ —Ä–∏—ç–ª—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü √ó 3).

4.–ò–¥—ë–º —Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å–≤–µ—Ç, –≤–æ–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞.

5.–ü—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ –ï–ì–†–ù –∏ –ø–∞—Å–ø–æ—Ä—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫.

6.–ß–∏—Ç–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä. –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã:
‚Äì —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –±—ã–ª ¬´–∂–∏–ª–æ–µ¬ª,
‚Äì –±—ã–ª–∞ —Ñ—Ä–∞–∑–∞, —á—Ç–æ –¥–æ–ª–≥–∏ –ø–æ –∫–æ–º–º—É–Ω–∞–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç,
‚Äì –∑–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–µ–∑–¥–µ.

 7.–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, –æ–ø–ª–∞—á–∏–≤–∞–µ–º, –∑–∞—Å–µ–ª—è–µ–º—Å—è.
"""
        },
        "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–º—É–Ω–∞–ª–∫—É": {
            "keywords": ["–∑–∞–ª–æ–≥", "–≤–µ—Ä–Ω—É—Ç—å", "–¥–µ–ø–æ–∑–∏—Ç"],
            "answer": """
–ß—Ç–æ –¥–µ–ª–∞–µ–º:
1. –ó–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ ‚Äî —Ç–∞–º –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å –±—É–º–∞–∂–∫–∏ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏ –≤—Ä–æ–¥–µ ¬´—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ¬ª, ¬´–≤–æ–¥–∞¬ª, ¬´–≥–∞–∑¬ª.

2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞.

3. –°–∫–∞–Ω–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

4. –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—á—ë—Ç—á–∏–∫–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –¥–æ –∫—Ä–∞—Å–Ω–æ–π –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞ —Å—á—ë—Ç—á–∏–∫–µ 3652.89 ‚Äî –ø–∏—à–µ–º 3652.

5. –í–≤–æ–¥–∏–º —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã, –Ω–∞–∂–∏–º–∞–µ–º ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª. –ì–æ—Ç–æ–≤–æ!
                
–ü–ª–∞—Ç–∏–º —Å 15 –ø–æ 25 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
"""
        }
    },
    "–ü–æ—á—Ç–∞": {
        "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –ø–æ—Å—ã–ª–∫—É": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": """
–ü–∏—Å—å–º–æ:
‚Äì –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ –ø–æ—á—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç –∏ –º–∞—Ä–∫—É.

‚Äì –ü–∏—à–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å–≤–æ–π.

‚Äì –ö–ª–∞–¥—ë–º –ø–∏—Å—å–º–æ –≤ –∫–æ–Ω–≤–µ—Ä—Ç –∏ –∫–∏–¥–∞–µ–º –µ–≥–æ –≤ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –Ω–∞ –ø–æ—á—Ç–µ (–æ–±—ã—á–Ω–æ —Å—Ç–æ–∏—Ç —É –≤—Ö–æ–¥–∞).

–ü–æ—Å—ã–ª–∫–∞:
‚Äì –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—É—Ç: pochta.ru/parcels.

‚Äì –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤–µ—â–∏ –≤ –∫–æ—Ä–æ–±–∫—É –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç (–∏—Ö –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞ –ø–æ—á—Ç–µ).

‚Äì –õ—É—á—à–µ –≤—Å–µ–≥–æ ‚Äî —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–º –∑–∞—Ä–∞–Ω–µ–µ.

‚Äì –ü—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∏ –±–µ—Ä—ë–º —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç.

‚Äì –ü—Ä–∏—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—á—Ç—É, –≥–æ–≤–æ—Ä–∏–º: ¬´–•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É¬ª.

‚Äì –û—Ç–¥–∞—ë–º, –æ–ø–ª–∞—á–∏–≤–∞–µ–º, –ø–æ–ª—É—á–∞–µ–º —á–µ–∫ –∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
"""
        },

        " –ö–∞–∫ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": """
–ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:
‚Äì –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏¬ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –ø–æ—Å—ã–ª–∫–∞.

‚Äì –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ ‚Äî –∏–¥—ë–º –Ω–∞ –ø–æ—á—Ç—É —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º.

–ï—Å–ª–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç:
‚Äì –í –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—Ä–∏–¥—ë—Ç –±—É–º–∞–∂–∫–∞ ‚Äî –∏–∑–≤–µ—â–µ–Ω–∏–µ.

‚Äì –ë–µ—Ä—ë–º –∏–∑–≤–µ—â–µ–Ω–∏–µ –∏ –ø–∞—Å–ø–æ—Ä—Ç, –∏–¥—ë–º –Ω–∞ –ø–æ—á—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—ã–ª–∫—É.

–ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω:

‚Äì –ü—Ä–æ—Å—Ç–æ –∏–¥—ë–º –Ω–∞ –ø–æ—á—Ç—É –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –∂–¥—ë—Ç–µ –ø–æ—Å—ã–ª–∫—É.

‚Äì –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ ‚Äî –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –µ–≥–æ, –∏ –≤—Å—ë, –ø–æ—Å—ã–ª–∫–∞ —É –≤–∞—Å. –ü–∞—Å–ø–æ—Ä—Ç –¥–∞–∂–µ –Ω–µ –Ω—É–∂–µ–Ω!
"""
        }
    },
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": {
        "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": """
–ï—Å–ª–∏ –∏–¥—ë—Ç–µ –≤ —á–∞—Å—Ç–Ω—É—é –∫–ª–∏–Ω–∏–∫—É:

‚Äì –ó–≤–æ–Ω–∏–º –≤ –∫–ª–∏–Ω–∏–∫—É ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥—ë—Ç–µ –Ω–∞ –∏—Ö —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö.
–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É ‚Äî –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫ –∫–∞–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.
C—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å.

‚Äì –í –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞ –±–µ—Ä—ë–º –ø–∞—Å–ø–æ—Ä—Ç –∏ –ø—Ä–∏—Ö–æ–¥–∏–º –≤ –∫–ª–∏–Ω–∏–∫—É.
‚Äì –ü–æ–¥—Ö–æ–¥–∏–º –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É) –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –∑–∞–ø–∏—Å—å.

–ï—Å–ª–∏ –∏–¥—ë—Ç–µ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫—É:
‚Äì –ï—Å–ª–∏ –≤–∞–º –¥–æ 18 –ª–µ—Ç ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∫ –ø–µ–¥–∏–∞—Ç—Ä—É, –µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ ‚Äî –∏–¥—ë–º –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É.

‚Äì –ù–∞ –ø—Ä–∏—ë–º–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏ –≥–¥–µ –±–æ–ª–∏—Ç. –ñ–∞–ª—É–µ–º—Å—è –µ–º—É –Ω–∞ –≤—Å–µ –Ω–∞ —Å–≤–µ—Ç–µ —á—Ç–æ–±—ã –¥–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –≤—Ä–∞—á–µ–π.
–•–æ—Ç—è –±—ã –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∏ –º–æ—á–∏.

‚Äì –ü–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ –≤–∞–º –ª–∏–±–æ —Å—Ä–∞–∑—É –≤—ã–¥–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞–ª–∏ –∫ –Ω—É–∂–Ω—ã–º –≤—Ä–∞—á–∞–º.
            """
        }
    }
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def make_id(text: str) -> str:
    return hashlib.sha256(text.encode()).hexdigest()[:8]

def load_cache():
    global callback_data_map
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r", encoding="utf-8") as f:
            callback_data_map = json.load(f)
    else:
        callback_data_map = {}

def save_cache():
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(callback_data_map, f, ensure_ascii=False, indent=2)

def build_cache():
    for theme in knowledge_base:
        theme_id = make_id(theme)
        callback_data_map[theme_id] = theme
        for sub in knowledge_base[theme]:
            sub_id = make_id(theme + sub)
            callback_data_map[sub_id] = [theme, sub]
    save_cache()

def create_theme_buttons():
    buttons = []
    for theme_id, value in callback_data_map.items():
        if isinstance(value, str):
            buttons.append(
                [InlineKeyboardButton(text=value.title(), callback_data=f"theme:{theme_id}")]
            )
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_subtopic_buttons(theme_id):
    theme = callback_data_map.get(theme_id)
    if not theme or not isinstance(theme, str):
        return InlineKeyboardMarkup(inline_keyboard=[])
    buttons = []
    for sub in knowledge_base.get(theme, {}):
        sub_id = make_id(theme + sub)
        buttons.append([InlineKeyboardButton(text=sub.title(), callback_data=f"sub:{sub_id}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_long_text(chat_id: int, text: str, reply_markup=None):
    MAX_LEN = 4000
    parts = [text[i:i + MAX_LEN] for i in range(0, len(text), MAX_LEN)]
    for part in parts:
        await bot.send_message(chat_id, part, reply_markup=reply_markup)
        await asyncio.sleep(0.1)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = create_theme_buttons()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data or ""
    chat_id = callback.message.chat.id

    if data.startswith("theme:"):
        theme_id = data.split(":", 1)[1]
        theme = callback_data_map.get(theme_id)
        if not theme:
            return await callback.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        kb = create_subtopic_buttons(theme_id)
        await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {theme.title()}\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)

    elif data.startswith("sub:"):
        sub_id = data.split(":", 1)[1]
        value = callback_data_map.get(sub_id)
        if not value or not isinstance(value, list):
            return await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        theme, sub = value
        answer = knowledge_base.get(theme, {}).get(sub, {}).get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        home_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await callback.message.delete()
        await send_long_text(chat_id, f"üßæ {sub.title()}:\n\n{answer}")
        await bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=home_kb)

    elif data == "back_to_menu":
        kb = create_theme_buttons()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

    else:
        await callback.answer()

# --- AIOHTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è /ping ---

async def handle_ping(request):
    return web.Response(text="OK ‚Äî I'm alive!")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

app = web.Application()
app.router.add_get("/", handle_ping)
app.router.add_get("/ping", handle_ping)

async def on_startup(app):
    load_cache()
    if not callback_data_map:
        build_cache()
    asyncio.create_task(dp.start_polling(bot))

app.on_startup.append(on_startup)

# --- –ó–∞–ø—É—Å–∫ ---

if __name__ == "__main__":
    web.run_app(app, port=PORT)
