import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Text

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üëá –°–Æ–î–ê –î–û–ë–ê–í–õ–Ø–ô–¢–ï –¢–ï–ú–´, –ü–û–î–¢–ï–ú–´, –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –ò –û–¢–í–ï–¢–´ üëá

knowledge_base = {
    "–∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è": {
        "–∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å": {
            "keywords": ["–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ", "–¥–æ–≥–æ–≤–æ—Ä", "–∞—Ä–µ–Ω–¥–∞"],
            "answer": "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è: 1) —á–∏—Ç–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä, 2) –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–æ–∫."
        },
        "–∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ª–æ–≥": {
            "keywords": ["–∑–∞–ª–æ–≥", "–≤–µ—Ä–Ω—É—Ç—å", "–¥–µ–ø–æ–∑–∏—Ç"],
            "answer": "–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –¢—Ä–µ–±—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∫—É."
        }
    },
    "–º–µ–¥–∏—Ü–∏–Ω–∞": {
        "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏—Å –æ–º—Å": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Å–∞ –û–ú–° –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ú–§–¶ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –°–ù–ò–õ–°."
        },
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É": {
            "keywords": ["–≤—Ä–∞—á", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"],
            "answer": "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã."
        }
    },
    # üéØ –ü–†–ò–ú–ï–† –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –¢–ï–ú–´:
    # "—Ä–∞–±–æ—Ç–∞": {
    #     "–∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ": {
    #         "keywords": ["—Ä–µ–∑—é–º–µ", "—Ä–∞–±–æ—Ç–∞"],
    #         "answer": "–î–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—é–º–µ: 1) –∫—Ä–∞—Ç–∫–æ, 2) –ø–æ –¥–µ–ª—É, 3) –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é."
    #     }
    # }
}

# üëÜ –í–°–Å –î–û–ë–ê–í–õ–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –°–Æ–î–ê. –ù–ò–ß–ï–ì–û –ë–û–õ–¨–®–ï –¢–†–û–ì–ê–¢–¨ –ù–ï –ù–ê–î–û üëÜ

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=theme.title(), callback_data=f"theme:{theme}")]
            for theme in knowledge_base
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

# –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–µ–º
@dp.callback_query(Text(startswith="theme:"))
async def show_subtopics(callback: types.CallbackQuery):
    theme = callback.data.split(":")[1]
    subtopics = knowledge_base[theme]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=sub.title(), callback_data=f"sub:{theme}:{sub}")]
            for sub in subtopics
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {theme.title()}\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)

# –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ç–µ–º—É
@dp.callback_query(Text(startswith="sub:"))
async def show_answer(callback: types.CallbackQuery):
    _, theme, sub = callback.data.split(":", 2)
    answer = knowledge_base[theme][sub]["answer"]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    await callback.message.edit_text(f"üßæ {sub.title()}:\n\n{answer}", reply_markup=kb)

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.callback_query(Text("back_to_menu"))
async def back_to_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=theme.title(), callback_data=f"theme:{theme}")]
            for theme in knowledge_base
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
