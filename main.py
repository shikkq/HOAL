import asyncio
import json
import hashlib
import os

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

CACHE_FILE = "callback_cache.json"
callback_data_map = {}  # id -> —Ç–µ–º–∞ –∏–ª–∏ [—Ç–µ–º–∞, –ø–æ–¥—Ç–µ–º–∞]

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
knowledge_base = {
    "–∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è": {
        "–∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å": {
            "keywords": ["–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ", "–¥–æ–≥–æ–≤–æ—Ä", "–∞—Ä–µ–Ω–¥–∞"],
            "answer": "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è: 1) —á–∏—Ç–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä, 2) –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–æ–∫."
        },
        "–∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ª–æ–≥": {
            "keywords": ["–∑–∞–ª–æ–≥", "–≤–µ—Ä–Ω—É—Ç—å", "–¥–µ–ø–æ–∑–∏—Ç"],
            "answer": "–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –¢—Ä–µ–±—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∫—É."
        }
    },
    "–º–µ–¥–∏—Ü–∏–Ω–∞": {
        "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏—Å –æ–º—Å": {
            "keywords": ["–ø–æ–ª–∏—Å", "–æ–º—Å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π"],
            "answer": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Å–∞ –û–ú–° –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ú–§–¶ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –°–ù–ò–õ–°."
        },
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É": {
            "keywords": ["–≤—Ä–∞—á", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"],
            "answer": "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã."
        }
    }
}


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def make_id(text: str) -> str:
    return hashlib.sha256(text.encode()).hexdigest()[:8]


def load_cache():
    global callback_data_map
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r", encoding="utf-8") as f:
            callback_data_map = json.load(f)
    else:
        callback_data_map = {}


def save_cache():
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(callback_data_map, f, ensure_ascii=False, indent=2)


def build_cache():
    for theme in knowledge_base:
        theme_id = make_id(theme)
        callback_data_map[theme_id] = theme
        for sub in knowledge_base[theme]:
            sub_id = make_id(theme + sub)
            callback_data_map[sub_id] = [theme, sub]
    save_cache()


def create_theme_buttons():
    buttons = []
    for theme_id, value in callback_data_map.items():
        if isinstance(value, str):
            buttons.append(
                InlineKeyboardButton(text=value.title(), callback_data=f"theme:{theme_id}")
            )
    return buttons


def create_subtopic_buttons(theme_id):
    buttons = []
    theme = callback_data_map.get(theme_id)
    if not theme or not isinstance(theme, str):
        return buttons
    for sub in knowledge_base.get(theme, {}):
        sub_id = make_id(theme + sub)
        buttons.append(
            InlineKeyboardButton(text=sub.title(), callback_data=f"sub:{sub_id}")
        )
    buttons.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return buttons


async def send_long_text(chat_id: int, text: str, reply_markup=None):
    MAX_LEN = 4000
    parts = [text[i:i + MAX_LEN] for i in range(0, len(text), MAX_LEN)]
    for part in parts:
        await bot.send_message(chat_id, part, reply_markup=reply_markup)
        await asyncio.sleep(0.1)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    for btn in create_theme_buttons():
        kb.add(btn)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)


@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data or ""
    chat_id = callback.message.chat.id

    if data.startswith("theme:"):
        theme_id = data.split(":", 1)[1]
        theme = callback_data_map.get(theme_id)
        if not theme:
            return await callback.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        kb = InlineKeyboardMarkup(row_width=1)
        for btn in create_subtopic_buttons(theme_id):
            kb.add(btn)
        await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {theme.title()}\n–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)

    elif data.startswith("sub:"):
        sub_id = data.split(":", 1)[1]
        value = callback_data_map.get(sub_id)
        if not value or not isinstance(value, list):
            return await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        theme, sub = value
        answer = knowledge_base.get(theme, {}).get(sub, {}).get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        kb = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
        )
        await callback.message.delete()
        await send_long_text(chat_id, f"üßæ {sub.title()}:\n\n{answer}")
        await bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=kb)

    elif data == "back_to_menu":
        kb = InlineKeyboardMarkup(row_width=1)
        for btn in create_theme_buttons():
            kb.add(btn)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

    else:
        await callback.answer()


# --- AIOHTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è /ping ---

async def handle_ping(request):
    return web.Response(text="OK ‚Äî I'm alive!")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

app = web.Application()
app.router.add_get("/", handle_ping)
app.router.add_get("/ping", handle_ping)

async def on_startup(app):
    load_cache()
    if not callback_data_map:
        build_cache()
    asyncio.create_task(dp.start_polling(bot))

app.on_startup.append(on_startup)


# --- –ó–∞–ø—É—Å–∫ ---

if __name__ == "__main__":
    web.run_app(app, port=PORT)
